https://docs.mongodb.com/manual/reference/connection-string/

* or /data/db should have permission for mongo user
./mongod --dbpath <directory>

* Subir com mapeamentop de volume e porta
$ docker run --rm --name mongoserver -p 8081:8081 -p 27017:27017  -v /Users/nagata/projects/bug_stock/ambiente/data:/data/db -d mongo

* Subir com configuração
$ docker run --name some-mongo -v /my/custom:/etc/mongo -d mongo --config /etc/mongo/mongod.conf

docker run --name mongo -v /c/Users/ronal/projetos/renner/mongo:/etc/mongo -d mongo:4.4.8 --config /etc/mongo/mongod.conf

* Mapeamento e configuração
docker run --rm --name mongoserver -p 27017:27017  -v /Users/nagata/programas/mongo/data:/data/db -v /Users/nagata/programas/mongo/conf:/etc/mongo -d mongo  --config /etc/mongo/mongod.conf

* Simples arquivo de configuração --mongod.conf
storage:
    dbPath: "/data/db"
    directoryPerDB: true
    journal:
        enabled: true
systemLog:
    destination: file
    path: "/data/db/mongodb.log"
    logAppend: true
    timeStampFormat: iso8601-utc
processManagement:
    fork: true
net:
    bindIp: 127.0.0.1
    port: 27017
    wireObjectCheck : false
    unixDomainSocket: 
        enabled : true


* Usar o bash dentro do container do mongo

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
https://medium.com/better-programming/carefully-migrating-a-collection-from-one-mongo-server-into-another-5601f5c12354
https://docs.mongodb.com/manual/tutorial/backup-and-restore-tools/

* Restaurar de arquivo
mongorestore --uri="mongodb://localhost:27017/stock-service" --nsInclude="stock-service.stockItem" ./dump

* Baixar cópia local
mongodump --uri "mongodb+srv://<your username>:<your password>@<your cluster>.mongodb.net/sample_supplies"

mongoexport --uri="mongodb+srv://<your username>:<your password>@<your cluster>.mongodb.net/sample_supplies" --collection=sales --out=sales.json

mongorestore --uri "mongodb+srv://<your username>:<your password>@<your cluster>.mongodb.net/sample_supplies"  --drop dump

mongoimport --uri="mongodb+srv://<your username>:<your password>@<your cluster>.mongodb.net/sample_supplies" --drop sales.json

* Criar coleção

  > db.createCollection("<nome>")

* Inserir
db.inspections.insert({
      "_id" : ObjectId("56d61033a378eccde8a8354f"),
      "id" : "10021-2015-ENFO",
      "certificate_number" : 9278806,
      "business_name" : "ATLIXCO DELI GROCERY INC.",
      "date" : "Feb 20 2015",
      "result" : "No Violation Issued",
      "sector" : "Cigarette Retail Dealer - 127",
      "address" : {
              "city" : "RIDGEWOOD",
              "zip" : 11385,
              "street" : "MENAHAN ST",
              "number" : 1712
         }
  })

db.inspections.insert({
      "id" : "10021-2015-ENFO",
      "certificate_number" : 9278806,
      "business_name" : "ATLIXCO DELI GROCERY INC.",
      "date" : "Feb 20 2015",
      "result" : "No Violation Issued",
      "sector" : "Cigarette Retail Dealer - 127",
      "address" : {
              "city" : "RIDGEWOOD",
              "zip" : 11385,
              "street" : "MENAHAN ST",
              "number" : 1712
         }
  })

db.inspections.find({"id" : "10021-2015-ENFO", "certificate_number" : 9278806}).pretty()

* Bulk Insert
db.inspections.insert([{ "_id": 1, "test": 1 },{ "_id": 1, "test": 2 },
                       { "_id": 3, "test": 3 }],{ "ordered": false })


  > db.<nome>.insert({"nome":"Teste1", "data": new Date(1994,02,26)})

  * Busca
  > db.<nome>.find()

  > db.nome.find({
    "curso.nome":"teste"
  })

  > fb.<collection>.find({
    $or : [
      {"curso.nome" : "SI"},
      {"curso.nome" : "TI"}
    ],
    "tipo" :"outras"
  })
  
  > db.<collection>.find({ "curso.nome": { $in : ["dia", "dia"] } })

* Remover db.<collection>.remove({})
  > db.vida.remove({"nome":"Teste1"})
  
* Atualizar registros
  > db.alunos.update(
    {"curso.nome" : "SI"},
    {
      $set :{
        "curso.nome" : "CA"
      }
    }, {
      multi : true
    }
  )
  
* Update de Array
  > db.<collection>.update(
    { "_id" : ObjectId("sdfsdfds")},
    {
      $push : { 
          "<field>" : "<value>"
      }
    }
  )
  
  
  > db.<collection>.update(
    { "" : ObjectId("sdf54546fsd")},
    {
      $push : { 
          "<field>" : { $each : [value, value]}
      }
    }
  )
  
* db.<collection>.find({ "notas" : { $gt : 5}})

db.partOrder2.aggregate([{ $match: {"company": "001", "destinationBranchId":"316", "type":"PEDIDO" }} , {"$group" : {_id:{type:"$type", state:"$state", company:"$company", branch:"$destinationBranchId" }, count:{$sum:1}}}])

db.order.aggregate(
   [
      {
        $project:{'id': '$_id', 'state': '$state'}
      },
      {
        $lookup: {
          from: 'partOrder2',
          let:{id:"$id",state:"$state"},
          pipeline: [{$match: {$expr: {$and:[{$eq: [ "$orderId" , "$$id" ]},{$ne: [ "$state" , "$$state" ]}]}}}],
          as: 'partOrder'
      }
    },
    {
        $project:{'id': '$_id'}
      },{ $unset: "_id" }
  ]
)
  
  
